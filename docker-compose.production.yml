version: '3.8'

services:
  # Main coordinator (NO TENSORFLOW)
  coordinator:
    build:
      context: .
      dockerfile: Dockerfile.coordinator
    container_name: trading_coordinator
    environment:
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=INFO
    volumes:
      - ./config:/app/config
      - ./data:/app/data
      - ./logs:/app/logs
    ports:
      - "8000:8000"  # API endpoint
    depends_on:
      - redis
      - kafka
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    restart: unless-stopped

  # TensorFlow LSTM Model Server (Isolated Process)
  lstm_model_server:
    build:
      context: .
      dockerfile: Dockerfile.tensorflow
    container_name: lstm_model_server
    environment:
      - PYTHONUNBUFFERED=1
      - TF_NUM_INTRAOP_THREADS=4
      - TF_NUM_INTEROP_THREADS=2
      - OMP_NUM_THREADS=4
      - MKL_NUM_THREADS=4
      - KMP_BLOCKTIME=0
      - CUDA_VISIBLE_DEVICES=0
      - TF_CPP_MIN_LOG_LEVEL=2
      - TF_LOGGING_LEVEL=ERROR
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
    ports:
      - "8001:8001"  # Model serving endpoint
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G
    devices:
      - driver: nvidia
        count: 1
        capabilities: [gpu]
    restart: unless-stopped

  # TensorFlow Sentiment Model Server (Isolated Process)
  sentiment_model_server:
    build:
      context: .
      dockerfile: Dockerfile.tensorflow
    container_name: sentiment_model_server
    environment:
      - PYTHONUNBUFFERED=1
      - TF_NUM_INTRAOP_THREADS=4
      - TF_NUM_INTEROP_THREADS=2
      - OMP_NUM_THREADS=4
      - MKL_NUM_THREADS=4
      - KMP_BLOCKTIME=0
      - CUDA_VISIBLE_DEVICES=1
      - TF_CPP_MIN_LOG_LEVEL=2
      - TF_LOGGING_LEVEL=ERROR
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
    ports:
      - "8002:8002"  # Model serving endpoint
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G
    devices:
      - driver: nvidia
        count: 1
        capabilities: [gpu]
    restart: unless-stopped

  # Technical Analysis Agent (CPU-only, no TensorFlow)
  technical_agent:
    build:
      context: .
      dockerfile: Dockerfile.agent
    container_name: technical_agent
    environment:
      - PYTHONUNBUFFERED=1
      - AGENT_TYPE=technical
      - MODEL_SERVER_URL=http://lstm_model_server:8001
    volumes:
      - ./config:/app/config
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - lstm_model_server
      - redis
      - kafka
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    restart: unless-stopped

  # Sentiment Analysis Agent (CPU-only, no TensorFlow)
  sentiment_agent:
    build:
      context: .
      dockerfile: Dockerfile.agent
    container_name: sentiment_agent
    environment:
      - PYTHONUNBUFFERED=1
      - AGENT_TYPE=sentiment
      - MODEL_SERVER_URL=http://sentiment_model_server:8002
    volumes:
      - ./config:/app/config
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - sentiment_model_server
      - redis
      - kafka
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    restart: unless-stopped

  # Market Data Agent (CPU-only, no TensorFlow)
  market_data_agent:
    build:
      context: .
      dockerfile: Dockerfile.agent
    container_name: market_data_agent
    environment:
      - PYTHONUNBUFFERED=1
      - AGENT_TYPE=market_data
    volumes:
      - ./config:/app/config
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - redis
      - kafka
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    restart: unless-stopped

  # Redis for caching and coordination
  redis:
    image: redis:7-alpine
    container_name: trading_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    restart: unless-stopped

  # Kafka for message queuing
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: trading_kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    ports:
      - "9092:9092"
      - "9101:9101"
    depends_on:
      - zookeeper
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    restart: unless-stopped

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: trading_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    restart: unless-stopped

  # Monitoring and metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: trading_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: trading_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    restart: unless-stopped

volumes:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: trading_network
    driver: bridge
