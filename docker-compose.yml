version: '3.8'

services:
  # Redis for event bus and caching
  redis:
    image: redis:7-alpine
    container_name: trading-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - trading-network
    restart: unless-stopped

  # PostgreSQL for metadata and configuration
  postgres:
    image: postgres:15-alpine
    container_name: trading-postgres
    environment:
      POSTGRES_DB: trading_intelligence
      POSTGRES_USER: trading_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-trading_pass}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - trading-network
    restart: unless-stopped

  # DuckDB doesn't need a container (file-based), but we can run analytics workbench
  duckdb-notebook:
    image: jupyter/scipy-notebook:latest
    container_name: trading-analytics
    ports:
      - "8888:8888"
    volumes:
      - ./data:/home/jovyan/data
      - ./notebooks:/home/jovyan/notebooks
      - ./common:/home/jovyan/common
    environment:
      JUPYTER_ENABLE_LAB: "yes"
    networks:
      - trading-network
    restart: unless-stopped

  # Vector store (Chroma)
  chroma:
    image: chromadb/chroma:latest
    container_name: trading-chroma
    ports:
      - "8000:8000"
    volumes:
      - chroma_data:/chroma/chroma
    environment:
      IS_PERSISTENT: "TRUE"
    networks:
      - trading-network
    restart: unless-stopped

  # Technical Analysis Agent
  technical-agent:
    build:
      context: .
      dockerfile: agents/technical/Dockerfile
    container_name: trading-technical-agent
    environment:
      AGENT_TYPE: technical
      REDIS_URL: redis://redis:6379
      POSTGRES_URL: postgresql://trading_user:${POSTGRES_PASSWORD:-trading_pass}@postgres:5432/trading_intelligence
      ENABLE_EXECUTION: ${ENABLE_EXECUTION:-false}
    volumes:
      - ./data:/app/data
      - ./config:/app/config
    depends_on:
      - redis
      - postgres
    networks:
      - trading-network
    restart: unless-stopped

  # Sentiment Analysis Agent
  sentiment-agent:
    build:
      context: .
      dockerfile: agents/sentiment/Dockerfile
    container_name: trading-sentiment-agent
    environment:
      AGENT_TYPE: sentiment
      REDIS_URL: redis://redis:6379
      POSTGRES_URL: postgresql://trading_user:${POSTGRES_PASSWORD:-trading_pass}@postgres:5432/trading_intelligence
      TWITTER_API_KEY: ${TWITTER_API_KEY}
      REDDIT_CLIENT_ID: ${REDDIT_CLIENT_ID}
      REDDIT_CLIENT_SECRET: ${REDDIT_CLIENT_SECRET}
    depends_on:
      - redis
      - postgres
    networks:
      - trading-network
    restart: unless-stopped

  # Flow Analysis Agent
  flow-agent:
    build:
      context: .
      dockerfile: agents/flow/Dockerfile
    container_name: trading-flow-agent
    environment:
      AGENT_TYPE: flow
      REDIS_URL: redis://redis:6379
      POSTGRES_URL: postgresql://trading_user:${POSTGRES_PASSWORD:-trading_pass}@postgres:5432/trading_intelligence
    depends_on:
      - redis
      - postgres
    networks:
      - trading-network
    restart: unless-stopped

  # Unified Scorer Service
  scorer:
    build:
      context: .
      dockerfile: common/scoring/Dockerfile
    container_name: trading-scorer
    environment:
      REDIS_URL: redis://redis:6379
      POSTGRES_URL: postgresql://trading_user:${POSTGRES_PASSWORD:-trading_pass}@postgres:5432/trading_intelligence
    ports:
      - "8001:8000"
    volumes:
      - ./config:/app/config
    depends_on:
      - redis
      - postgres
    networks:
      - trading-network
    restart: unless-stopped

  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: api/Dockerfile
    container_name: trading-api-gateway
    ports:
      - "8080:8000"
    environment:
      REDIS_URL: redis://redis:6379
      POSTGRES_URL: postgresql://trading_user:${POSTGRES_PASSWORD:-trading_pass}@postgres:5432/trading_intelligence
      ENABLE_EXECUTION: ${ENABLE_EXECUTION:-false}
    depends_on:
      - redis
      - postgres
      - technical-agent
      - sentiment-agent
      - flow-agent
      - scorer
    networks:
      - trading-network
    restart: unless-stopped

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: trading-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - trading-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: trading-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - trading-network
    restart: unless-stopped

volumes:
  redis_data:
  postgres_data:
  chroma_data:
  prometheus_data:
  grafana_data:

networks:
  trading-network:
    driver: bridge
